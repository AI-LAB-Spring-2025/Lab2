# -*- coding: utf-8 -*-
"""22L-6697_AI-_LAB2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uIUS1aLADr-qTcwbkJbm1tKP_7Az1bpi
"""

import matplotlib.pyplot as plt

group_A = [12, 15, 14, 13, 16, 18, 19, 15, 14, 20, 17, 14, 15, 40, 45, 50, 62]
group_B = [12, 17, 15, 13, 19, 20, 21, 18, 17, 16, 15, 14, 16, 15]

# fig with two subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

# Group A
ax1.boxplot(group_A)
ax1.set_title('Box Plot for Group A')
ax1.set_ylabel('Measurement Values')

# Group B
ax2.boxplot(group_B)
ax2.set_title('Box Plot for Group B')
ax2.set_ylabel('Measurement Values')

#  figure title
fig.suptitle('BOX PLOTS for Group A and Group B ', fontsize=16)

plt.show()

from google.colab import files
uploaded = files.upload()

# Open the file in read mode
file = open("genome.txt", "r")
# Read the entire content of the file
content = file.read()
# Print the content
print(content)
# Close the file
file.close()

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


with open('genome.txt', 'r') as file:
    genome_sequence = file.read().strip()


genome_list = list(genome_sequence)
genome_length = len(genome_list)
print(f"Genome Sequence: {genome_sequence}")
print(f"Genome Length: {genome_length}")

t = np.linspace(0, 4 * np.pi, genome_length)
x = np.cos(t)
y = np.sin(t)
z = np.linspace(0, 5, genome_length)  # z increases linearly to spread out the helix vertically

# Combine the coordinates into a (genome_length x 3) array
coordinates = np.column_stack((x, y, z))


color_map = {'A': 'red', 'T': 'green', 'C': 'blue', 'G': 'yellow'}
colors = [color_map.get(base, 'gray') for base in genome_list]  # Default to gray for unknown bases

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')


for i in range(genome_length):
    ax.scatter(x[i], y[i], z[i], color=colors[i], s=100, label=genome_list[i] if i == 0 else "")


ax.set_xlabel('X ')
ax.set_ylabel('Y ')
ax.set_zlabel('Z (Height)')
ax.set_title('3D Helix Structure of Genome Sequence')


handles = [plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=color_map[base], markersize=10) for base in color_map]
labels = [f'{base} = {color_map[base]}' for base in color_map]
ax.legend(handles, labels, title="Base Colors")


plt.show()

from PIL import Image
from numpy import asarray
import numpy as np
import matplotlib.pyplot as plt

img = Image.open('sample.jpg')
numpydata = asarray(img)


print("NumPy Array Shape:", numpydata.shape)
print("NumPy Array Data:\n", numpydata)

plt.figure(figsize=(10, 5))
plt.subplot(2, 2, 1)
plt.imshow(numpydata)
plt.title("Original ")
plt.axis("off")

rotated_img = np.rot90(numpydata)
plt.subplot(2, 2, 2)
plt.imshow(rotated_img)
plt.title("Rotated 90 Deg")
plt.axis("off")


flipped_img = np.fliplr(numpydata)
plt.subplot(2, 2, 3)
plt.imshow(flipped_img)
plt.title("Flipped ")
plt.axis("off")

if numpydata.ndim == 3:
    gray_img = np.dot(numpydata[..., :3], [0.299, 0.587, 0.114])
else:
    gray_img = numpydata
plt.subplot(2, 2, 4)
plt.imshow(gray_img, cmap="gray")
plt.title("Grayscale ")
plt.axis("off")


plt.tight_layout()
plt.show()

import numpy as np
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()
X = np.array(iris.data)  # Features
Y = np.array(iris.target)  # Target labels

# Calculate mean, median, and standard deviation for each feature
mean_values = np.mean(X, axis=0)
median_values = np.median(X, axis=0)
std_values = np.std(X, axis=0)

# Find the minimum and maximum values for each feature
min_values = np.min(X, axis=0)
max_values = np.max(X, axis=0)

# Extract only the sepal length and sepal width as a NumPy array
sepal_features = X[:, :2]  # First two columns: sepal length and sepal width

# Print results
print("Mean values for each feature:", mean_values)
print("Median values for each feature:", median_values)
print("Standard deviation for each feature:", std_values)
print("Minimum values for each feature:", min_values)
print("Maximum values for each feature:", max_values)
print("Sepal length and width:\n", sepal_features)

import matplotlib.pyplot as plt

# Scatter plot of sepal length vs sepal width
plt.figure(figsize=(8, 6))
plt.scatter(X[:, 0], X[:, 1], c=Y, cmap='viridis', edgecolor='k')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('Sepal Length vs Sepal Width')
plt.colorbar(label='Species')
plt.show()

# Histogram showing the distribution of sepal length
plt.figure(figsize=(8, 6))
plt.hist(X[:, 0], bins=20, color='blue', edgecolor='black')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Frequency')
plt.title('Distribution of Sepal Length')
plt.show()

# Line plot to visualize the relationship between petal length and petal width
plt.figure(figsize=(8, 6))
plt.plot(X[:, 2], X[:, 3], color='red', marker='o', linestyle='none')
plt.xlabel('Petal Length (cm)')
plt.ylabel('Petal Width (cm)')
plt.title('Petal Length vs Petal Width')
plt.show()