# -*- coding: utf-8 -*-
"""q4.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XVSqQj0A74jh1tUjcXrA0oHgwzu0t44f
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()

# Accessing the features (data) using NumPy array
X = np.array(iris.data)  # Features (sepal length, sepal width, petal length, petal width)
Y = np.array(iris.target)  # Target variable (species: 0 for setosa, 1 for versicolor, 2 for virginica)

# Step 1: Use NumPy to perform calculations
# Calculate mean, median, and standard deviation for each feature
mean_values = np.mean(X, axis=0)
median_values = np.median(X, axis=0)
std_values = np.std(X, axis=0)

# Find the minimum and maximum values for each feature
min_values = np.min(X, axis=0)
max_values = np.max(X, axis=0)

# Extract only the sepal length and sepal width as a NumPy array
sepal_features = X[:, :2]  # First two columns (sepal length and sepal width)

# Print the results
print("Mean values for each feature:", mean_values)
print("Median values for each feature:", median_values)
print("Standard deviation for each feature:", std_values)
print("Minimum values for each feature:", min_values)
print("Maximum values for each feature:", max_values)
#print("Sepal length and sepal width:\n", sepal_features)

# Step 2: Use Matplotlib to visualize the data
plt.figure(figsize=(15, 5))

# Scatter plot of sepal length vs sepal width
plt.subplot(1, 3, 1)
plt.scatter(X[:, 0], X[:, 1], c=Y, cmap='viridis', edgecolor='k')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.title('Sepal Length vs Sepal Width')
plt.colorbar(label='Species')

# Histogram showing the distribution of sepal length
plt.subplot(1, 3, 2)
plt.hist(X[:, 0], bins=20, color='blue', edgecolor='black')
plt.xlabel('Sepal Length')
plt.ylabel('Frequency')
plt.title('Distribution of Sepal Length')

# Line plot to visualize the relationship between petal length and petal width
plt.subplot(1, 3, 3)
plt.plot(X[:, 2], X[:, 3], 'g-')
plt.xlabel('Petal Length')
plt.ylabel('Petal Width')
plt.title('Petal Length vs Petal Width')

# Display all plots
plt.tight_layout()
plt.show()