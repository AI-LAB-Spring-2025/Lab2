# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MG3uo2gP3ssTt1pmfABII35RW-xiXfrh
"""

import matplotlib.pyplot as plt

# Data
group_A = [12, 15, 14, 13, 16, 18, 19, 15, 14, 20, 17, 14, 15, 40, 45, 50, 62]
group_B = [12, 17, 15, 13, 19, 20, 21, 18, 17, 16, 15, 14, 16, 15]

# Create a figure with subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

# Box plot for Group A
ax1.boxplot(group_A)
ax1.set_title('Box Plot for Group A')
ax1.set_ylabel('Measurement Values')

# Box plot for Group B
ax2.boxplot(group_B)
ax2.set_title('Box Plot for Group B')
ax2.set_ylabel('Measurement Values')

# Display the plots
plt.show()

file_name = 'genome.txt'
fd = open(file_name, 'r')

genome_sequence = fd.readline().strip()
genome_list = list(genome_sequence)
genome_length = len(genome_list)

# We'll use the parametric equations for a helix:
# x = cos(t), y = sin(t), z = t (or a scaled version of t)
# We want to span a range so that the helix makes a few turns.
t = np.linspace(0, 4 * np.pi, genome_length) # 4*pi gives about 2 turns
x = np.cos(t)
y = np.sin(t)
z = np.linspace(0, 5, genome_length) # z increases linearly to spread out the helix vertically
# Combine the coordinates into a (genome_length x 3) array
coordinates = np.column_stack((x, y, z))

color_map = {'A': 'green', 'T': 'yellow', 'G': 'blue', 'C': 'red'}
colors = [color_map.get(base, 'black') for base in genome_sequence]

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

for i in range(genome_length):
    ax.scatter(coordinates[i, 0], coordinates[i, 1], coordinates[i, 2], color=colors[i], s=50)

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Genome Visualization on a Helix')

plt.show()

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import requests
from io import BytesIO

url = "https://cdn.prod.website-files.com/66573823a3930b4b0255d6d5/668696f3e11d6d863c897fcd_BP_toblerone-2.webp"
img_array = np.array(Image.open(BytesIO(requests.get(url).content)))

# Plot original image
plt.figure(figsize=(5, 5))
plt.subplot(2, 2, 1)
plt.imshow(img_array)
plt.title("Original Image")
plt.axis("off")

# Rotate image by 90 degrees
plt.subplot(2, 2, 3)
plt.imshow(np.rot90(img_array))
plt.title("Rotated 90 Degrees")
plt.axis("off")

# Flip image horizontally
plt.subplot(2, 2, 2)
plt.imshow(np.fliplr(img_array))
plt.title("Flipped Horizontally")
plt.axis("off")

# Convert to grayscale
gray_img = np.dot(img_array[..., :3], [0.299, 0.587, 0.114])
plt.subplot(2, 2, 4)
plt.imshow(gray_img, cmap="gray")
plt.title("Grayscale Image")
plt.axis("off")

# Show plots
plt.tight_layout()
plt.show()

from sklearn.datasets import load_iris
import numpy as np
import matplotlib.pyplot as plt

# Load dataset
iris = load_iris()
X = np.array(iris.data)
Y = np.array(iris.target)

# 1. Numpy operations
# Calculate statistics
features = ['sepal length', 'sepal width', 'petal length', 'petal width']
print("Feature Statistics:")
print("-------------------")
for i, feature in enumerate(features):
    print(f"{feature.capitalize()}:")
    print(f"  Mean: {np.mean(X[:, i]):.2f}")
    print(f"  Median: {np.median(X[:, i]):.2f}")
    print(f"  Std Dev: {np.std(X[:, i]):.2f}")
    print(f"  Min: {np.min(X[:, i]):.2f}")
    print(f"  Max: {np.max(X[:, i]):.2f}\n")

# Extract sepal features
sepal_features = X[:, :2]
print("Sepal features shape:", sepal_features.shape)

# 2. Matplotlib visualizations
plt.figure(figsize=(15, 5))

# Scatter plot
plt.subplot(1, 3, 1)
plt.scatter(X[:, 0], X[:, 1], c='blue', alpha=0.7)
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.title('Sepal Length vs Sepal Width')

# Histogram
plt.subplot(1, 3, 2)
plt.hist(X[:, 0], bins=15, color='green', edgecolor='black')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Frequency')
plt.title('Sepal Length Distribution')

# Line plot - siorted
sorted_idx = np.argsort(X[:, 2])
plt.subplot(1, 3, 3)
plt.plot(X[sorted_idx, 2], X[sorted_idx, 3], 'r-')
plt.xlabel('Petal Length (cm)')
plt.ylabel('Petal Width (cm)')
plt.title('Petal Length vs Petal Width')

plt.tight_layout()
plt.show()